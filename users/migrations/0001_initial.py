# Generated by Django 5.2.3 on 2025-06-13 22:08

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated.', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is marked as deleted.', verbose_name='Is deleted')),
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique identifier for the model instance.', primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the user who created the record.', null=True, verbose_name='IP address')),
                ('author', models.EmailField(blank=True, help_text='Email of the user who created the record.', max_length=254, null=True, verbose_name='Author')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata stored as JSON.', null=True, verbose_name='Metadata')),
                ('email', models.EmailField(help_text="User's email address (unique).", max_length=254, unique=True, verbose_name='Email')),
                ('phone', models.CharField(blank=True, help_text="User's phone number (optional).", max_length=30, null=True, verbose_name='Phone number')),
                ('first_name', models.CharField(blank=True, help_text="User's first name.", max_length=150, null=True, verbose_name='First name')),
                ('last_name', models.CharField(help_text="User's last name.", max_length=150, verbose_name='Last name')),
                ('photo', models.ImageField(blank=True, help_text='Profile photo of the user (optional).', null=True, upload_to='profile_photos/', verbose_name='Profile photo')),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether this user should be treated as active.', verbose_name='Active')),
                ('role', models.CharField(choices=[('learner', 'Apprenant'), ('teacher', 'Enseignant')], default='learner', help_text="User's role (learner or teacher).", max_length=20, verbose_name='Role')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated.', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is marked as deleted.', verbose_name='Is deleted')),
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique identifier for the model instance.', primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the user who created the record.', null=True, verbose_name='IP address')),
                ('author', models.EmailField(blank=True, help_text='Email of the user who created the record.', max_length=254, null=True, verbose_name='Author')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata stored as JSON.', null=True, verbose_name='Metadata')),
                ('bio', models.TextField(blank=True, help_text="User's biography or description.", null=True, verbose_name='Bio')),
                ('qualifications', models.TextField(blank=True, help_text="User's qualifications (used for teacher requests).", null=True, verbose_name='Qualifications')),
                ('address', models.CharField(blank=True, help_text="User's address (optional).", max_length=255, null=True, verbose_name='Address')),
                ('user', models.OneToOneField(help_text='Associated user account.', on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
            },
        ),
        migrations.CreateModel(
            name='TeacherRequest',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated.', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is marked as deleted.', verbose_name='Is deleted')),
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique identifier for the model instance.', primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the user who created the record.', null=True, verbose_name='IP address')),
                ('author', models.EmailField(blank=True, help_text='Email of the user who created the record.', max_length=254, null=True, verbose_name='Author')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata stored as JSON.', null=True, verbose_name='Metadata')),
                ('qualifications', models.TextField(help_text='Qualifications provided for the teacher request.', verbose_name='Qualifications')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('approved', 'Approuvé'), ('rejected', 'Rejeté')], default='pending', help_text='Current status of the teacher request.', max_length=20, verbose_name='Status')),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='Date and time when the request was reviewed.', null=True, verbose_name='Reviewed at')),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='Admin who reviewed the request.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_requests', to=settings.AUTH_USER_MODEL, verbose_name='Reviewed by')),
                ('user', models.ForeignKey(help_text='User requesting to become a teacher.', on_delete=django.db.models.deletion.CASCADE, related_name='teacher_requests', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Teacher Request',
                'verbose_name_plural': 'Teacher Requests',
            },
        ),
        migrations.CreateModel(
            name='TwoFactorCode',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated.', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is marked as deleted.', verbose_name='Is deleted')),
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique identifier for the model instance.', primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the user who created the record.', null=True, verbose_name='IP address')),
                ('author', models.EmailField(blank=True, help_text='Email of the user who created the record.', max_length=254, null=True, verbose_name='Author')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata stored as JSON.', null=True, verbose_name='Metadata')),
                ('code', models.CharField(help_text='6-digit verification code.', max_length=6, verbose_name='Code')),
                ('expiry', models.DateTimeField(help_text='Date and time when the code expires.', verbose_name='Expiry')),
                ('user', models.ForeignKey(help_text='User associated with the 2FA code.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Two Factor Code',
                'verbose_name_plural': 'Two Factor Codes',
            },
        ),
    ]
