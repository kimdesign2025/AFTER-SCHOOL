# Generated by Django 5.2.3 on 2025-06-21 14:52

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated.', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is marked as deleted.', verbose_name='Is deleted')),
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique identifier for the model instance.', primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the user who created the record.', null=True, verbose_name='IP address')),
                ('author', models.EmailField(blank=True, help_text='Email of the user who created the record.', max_length=254, null=True, verbose_name='Author')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata stored as JSON.', null=True, verbose_name='Metadata')),
                ('title', models.CharField(help_text='Title of the course.', max_length=255, verbose_name='Title')),
                ('description', models.TextField(help_text='Detailed description of the course.', verbose_name='Description')),
                ('thumbnail', models.ImageField(blank=True, help_text='Thumbnail image for the course (optional).', null=True, upload_to='course_thumbnails/', verbose_name='Thumbnail')),
                ('class_level', models.CharField(choices=[('class_1', 'Class 1'), ('class_2', 'Class 2'), ('class_3', 'Class 3'), ('class_4', 'Class 4'), ('class_5', 'Class 5'), ('class_6', 'Class 6'), ('class_7', 'Class 7'), ('class_8', 'Class 8'), ('class_9', 'Class 9'), ('class_10', 'Class 10'), ('class_11', 'Class 11'), ('class_12', 'Class 12')], help_text='Target class level for the course.', max_length=20, verbose_name='Class Level')),
                ('video', models.FileField(blank=True, help_text='Main video content for the course (optional).', null=True, upload_to='course_videos/', verbose_name='Course Video')),
                ('content', models.TextField(help_text='Detailed content or syllabus of the course.', verbose_name='Course Content')),
                ('prerequisites', models.TextField(blank=True, help_text='Prerequisites for taking the course (optional).', null=True, verbose_name='Prerequisites')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', help_text='Current status of the course.', max_length=20, verbose_name='Status')),
                ('category', models.CharField(choices=[('math', 'Mathematics'), ('science', 'Science'), ('literature', 'Literature'), ('history', 'History'), ('computer_science', 'Computer Science'), ('languages', 'Languages'), ('other', 'Other')], default='other', help_text='Category of the course.', max_length=50, verbose_name='Category')),
                ('is_public', models.BooleanField(default=True, help_text='Indicates whether the course is accessible to all users.', verbose_name='Is Public')),
                ('estimated_duration', models.PositiveIntegerField(blank=True, help_text='Estimated duration of the course in hours (optional).', null=True, verbose_name='Estimated Duration (hours)')),
                ('teacher', models.ForeignKey(help_text='Teacher who created the course.', on_delete=django.db.models.deletion.CASCADE, related_name='courses', to=settings.AUTH_USER_MODEL, verbose_name='Teacher')),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated.', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is marked as deleted.', verbose_name='Is deleted')),
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique identifier for the model instance.', primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the user who created the record.', null=True, verbose_name='IP address')),
                ('author', models.EmailField(blank=True, help_text='Email of the user who created the record.', max_length=254, null=True, verbose_name='Author')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata stored as JSON.', null=True, verbose_name='Metadata')),
                ('title', models.CharField(help_text='Title of the module.', max_length=255, verbose_name='Title')),
                ('description', models.TextField(help_text='Description of the module content.', verbose_name='Description')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order of the module within the course.', verbose_name='Order')),
                ('video', models.FileField(blank=True, help_text='Video content for the module (optional).', null=True, upload_to='module_videos/', verbose_name='Module Video')),
                ('content', models.TextField(help_text='Detailed content of the module.', verbose_name='Module Content')),
                ('course', models.ForeignKey(help_text='Course to which this module belongs.', on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='course.course', verbose_name='Course')),
            ],
            options={
                'verbose_name': 'Module',
                'verbose_name_plural': 'Modules',
                'ordering': ['order', 'created_at'],
            },
        ),
    ]
