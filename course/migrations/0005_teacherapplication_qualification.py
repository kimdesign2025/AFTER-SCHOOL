# Generated by Django 5.2.3 on 2025-06-22 05:02

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('course', '0004_modulecompletion'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TeacherApplication',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated.', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is marked as deleted.', verbose_name='Is deleted')),
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique identifier for the model instance.', primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the user who created the record.', null=True, verbose_name='IP address')),
                ('author', models.EmailField(blank=True, help_text='Email of the user who created the record.', max_length=254, null=True, verbose_name='Author')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata stored as JSON.', null=True, verbose_name='Metadata')),
                ('teaching_experience', models.TextField(help_text='Details of teaching experience, including years and roles.', verbose_name='Teaching Experience')),
                ('subject_expertise', models.CharField(help_text='Subjects the applicant is qualified to teach.', max_length=200, verbose_name='Subject Expertise')),
                ('identity_card', models.CharField(help_text='National identity card number.', max_length=100, verbose_name='Identity Card Number')),
                ('city', models.CharField(help_text='City of residence.', max_length=100, verbose_name='City')),
                ('phone_number', models.CharField(blank=True, help_text='Contact phone number (optional).', max_length=20, verbose_name='Phone Number')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('approved', 'Approuvé'), ('rejected', 'Rejeté')], default='pending', help_text='Current status of the application.', max_length=20, verbose_name='Status')),
                ('user', models.ForeignKey(help_text='User submitting the application.', on_delete=django.db.models.deletion.CASCADE, related_name='teacher_applications', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Teacher Application',
                'verbose_name_plural': 'Teacher Applications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Qualification',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated.', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is marked as deleted.', verbose_name='Is deleted')),
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique identifier for the model instance.', primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the user who created the record.', null=True, verbose_name='IP address')),
                ('author', models.EmailField(blank=True, help_text='Email of the user who created the record.', max_length=254, null=True, verbose_name='Author')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata stored as JSON.', null=True, verbose_name='Metadata')),
                ('title', models.CharField(help_text='Title of the qualification or certificate.', max_length=200, verbose_name='Title')),
                ('issuing_organization', models.CharField(help_text='Organization that issued the qualification.', max_length=200, verbose_name='Issuing Organization')),
                ('issue_date', models.DateField(help_text='Date the qualification was issued.', verbose_name='Issue Date')),
                ('certificate_file', models.FileField(blank=True, help_text='Optional file upload for the certificate (PDF or image).', null=True, upload_to='certificates/', verbose_name='Certificate File')),
                ('school', models.CharField(help_text='School or institution where the qualification was earned.', max_length=200, verbose_name='School/Institution')),
                ('application', models.ForeignKey(help_text='Teacher application this qualification belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='qualifications', to='course.teacherapplication', verbose_name='Application')),
            ],
            options={
                'verbose_name': 'Qualification',
                'verbose_name_plural': 'Qualifications',
                'ordering': ['-issue_date'],
            },
        ),
    ]
